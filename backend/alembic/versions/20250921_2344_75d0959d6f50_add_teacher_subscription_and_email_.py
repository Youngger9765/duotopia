"""Add teacher subscription and email verification fields

Revision ID: 75d0959d6f50
Revises: e2c561f95920
Create Date: 2025-09-21 23:44:09.844742

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "75d0959d6f50"
down_revision: Union[str, None] = "e2c561f95920"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # NOTE: Removed incorrect drop of unique_assignment_content constraint
    # The constraint is business-critical and should remain in the database
    op.drop_constraint(
        "assignment_contents_assignment_id_fkey",
        "assignment_contents",
        type_="foreignkey",
    )
    op.drop_constraint(
        "assignment_contents_content_id_fkey", "assignment_contents", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "assignment_contents", "contents", ["content_id"], ["id"]
    )
    op.create_foreign_key(
        None, "assignment_contents", "assignments", ["assignment_id"], ["id"]
    )
    # NOTE: Removed incorrect drop of assignments.status column
    # The column may not exist in staging database
    # NOTE: Removed incorrect add of classroom_students.is_active column
    # The column may already exist in staging database
    # NOTE: Removed incorrect drop of unique_classroom_student constraint
    # The constraint may not exist in staging database
    op.drop_constraint(
        "classroom_students_classroom_id_fkey", "classroom_students", type_="foreignkey"
    )
    op.drop_constraint(
        "classroom_students_student_id_fkey", "classroom_students", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "classroom_students", "students", ["student_id"], ["id"]
    )
    op.create_foreign_key(
        None, "classroom_students", "classrooms", ["classroom_id"], ["id"]
    )
    op.add_column(
        "classrooms",
        sa.Column(
            "level",
            sa.Enum("PRE_A", "A1", "A2", "B1", "B2", "C1", "C2", name="programlevel"),
            nullable=True,
        ),
    )
    op.drop_column("classrooms", "academic_year")
    op.drop_column("classrooms", "grade")
    op.drop_column("classrooms", "school")
    op.drop_index("ix_content_items_content_id", table_name="content_items")
    op.create_unique_constraint(
        "_content_item_order_uc", "content_items", ["content_id", "order_index"]
    )
    op.add_column(
        "lessons", sa.Column("estimated_minutes", sa.Integer(), nullable=True)
    )
    # NOTE: Removed incorrect add of lessons.is_active column
    # The column may already exist in staging database
    op.drop_constraint("lessons_program_id_fkey", "lessons", type_="foreignkey")
    op.create_foreign_key(None, "lessons", "programs", ["program_id"], ["id"])
    op.add_column("programs", sa.Column("is_template", sa.Boolean(), nullable=False))
    op.add_column("programs", sa.Column("classroom_id", sa.Integer(), nullable=True))
    op.add_column(
        "programs", sa.Column("source_type", sa.String(length=20), nullable=True)
    )
    op.add_column("programs", sa.Column("source_metadata", sa.JSON(), nullable=True))
    op.add_column("programs", sa.Column("estimated_hours", sa.Integer(), nullable=True))
    op.add_column("programs", sa.Column("order_index", sa.Integer(), nullable=True))
    op.add_column("programs", sa.Column("tags", sa.JSON(), nullable=True))
    # NOTE: Removed incorrect add of programs.is_active column
    # The column may already exist in staging database
    op.add_column(
        "programs", sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.create_foreign_key(
        None, "programs", "classrooms", ["classroom_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("programs", "is_public")
    op.add_column(
        "student_assignments",
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "student_assignments",
        sa.Column("returned_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "student_assignments",
        sa.Column("resubmitted_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "student_assignments",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
    )
    op.add_column(
        "student_assignments",
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "student_content_progress", sa.Column("ai_feedback", sa.Text(), nullable=True)
    )
    op.alter_column(
        "student_content_progress",
        "response_data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
    )
    op.alter_column(
        "student_content_progress",
        "ai_scores",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
    )
    op.drop_column("student_content_progress", "updated_at")
    op.drop_column("student_content_progress", "created_at")
    op.drop_column("student_content_progress", "time_spent_seconds")
    op.add_column(
        "student_item_progress", sa.Column("answer_text", sa.Text(), nullable=True)
    )
    op.add_column(
        "student_item_progress", sa.Column("attempts", sa.Integer(), nullable=True)
    )
    op.alter_column(
        "student_item_progress",
        "status",
        existing_type=postgresql.ENUM(
            "DRAFT", "PUBLISHED", "CLOSED", name="assignmentstatus"
        ),
        type_=sa.String(length=20),
        existing_nullable=True,
    )
    # NOTE: Removed incorrect drop of unique_student_item_progress constraint
    # The constraint may not exist in staging database
    # NOTE: Removed duplicate creation of _student_item_progress_uc constraint
    # The constraint may already exist in staging database
    op.drop_constraint(
        "student_item_progress_content_item_id_fkey",
        "student_item_progress",
        type_="foreignkey",
    )
    op.drop_constraint(
        "student_item_progress_student_assignment_id_fkey",
        "student_item_progress",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "student_item_progress",
        "content_items",
        ["content_item_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "student_item_progress",
        "student_assignments",
        ["student_assignment_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("student_item_progress", "completeness_score")
    op.drop_column("student_item_progress", "prosody_score")
    op.drop_column("student_item_progress", "transcription")
    op.drop_column("student_item_progress", "response_data")
    op.add_column(
        "students", sa.Column("password_changed", sa.Boolean(), nullable=True)
    )
    op.add_column("students", sa.Column("email_verified", sa.Boolean(), nullable=True))
    op.add_column(
        "students",
        sa.Column("email_verified_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "students",
        sa.Column("email_verification_token", sa.String(length=100), nullable=True),
    )
    op.add_column(
        "students",
        sa.Column(
            "email_verification_sent_at", sa.DateTime(timezone=True), nullable=True
        ),
    )
    op.add_column(
        "students", sa.Column("parent_phone", sa.String(length=20), nullable=True)
    )
    op.add_column(
        "students", sa.Column("avatar_url", sa.String(length=500), nullable=True)
    )
    op.add_column(
        "students", sa.Column("last_login", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column("students", sa.Column("target_wpm", sa.Integer(), nullable=True))
    op.add_column("students", sa.Column("target_accuracy", sa.Float(), nullable=True))
    op.alter_column(
        "students", "student_number", existing_type=sa.VARCHAR(length=50), nullable=True
    )
    op.alter_column(
        "students",
        "email",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=255),
        nullable=True,
    )
    op.drop_index("ix_students_student_number", table_name="students")
    op.drop_index("ix_students_email", table_name="students")
    op.create_index(op.f("ix_students_email"), "students", ["email"], unique=False)
    op.add_column("teachers", sa.Column("phone", sa.String(length=20), nullable=True))
    op.add_column(
        "teachers", sa.Column("avatar_url", sa.String(length=500), nullable=True)
    )
    op.add_column("teachers", sa.Column("is_demo", sa.Boolean(), nullable=True))
    op.add_column("teachers", sa.Column("email_verified", sa.Boolean(), nullable=True))
    op.add_column(
        "teachers",
        sa.Column("email_verified_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "teachers",
        sa.Column("email_verification_token", sa.String(length=100), nullable=True),
    )
    op.add_column(
        "teachers",
        sa.Column(
            "email_verification_sent_at", sa.DateTime(timezone=True), nullable=True
        ),
    )
    op.add_column(
        "teachers",
        sa.Column("subscription_end_date", sa.DateTime(timezone=True), nullable=True),
    )
    op.alter_column(
        "teachers",
        "email",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=255),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "teachers",
        "email",
        existing_type=sa.String(length=255),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    op.drop_column("teachers", "subscription_end_date")
    op.drop_column("teachers", "email_verification_sent_at")
    op.drop_column("teachers", "email_verification_token")
    op.drop_column("teachers", "email_verified_at")
    op.drop_column("teachers", "email_verified")
    op.drop_column("teachers", "is_demo")
    op.drop_column("teachers", "avatar_url")
    op.drop_column("teachers", "phone")
    op.drop_index(op.f("ix_students_email"), table_name="students")
    op.create_index("ix_students_email", "students", ["email"], unique=True)
    op.create_index(
        "ix_students_student_number", "students", ["student_number"], unique=True
    )
    op.alter_column(
        "students",
        "email",
        existing_type=sa.String(length=255),
        type_=sa.VARCHAR(length=100),
        nullable=False,
    )
    op.alter_column(
        "students",
        "student_number",
        existing_type=sa.VARCHAR(length=50),
        nullable=False,
    )
    op.drop_column("students", "target_accuracy")
    op.drop_column("students", "target_wpm")
    op.drop_column("students", "last_login")
    op.drop_column("students", "avatar_url")
    op.drop_column("students", "parent_phone")
    op.drop_column("students", "email_verification_sent_at")
    op.drop_column("students", "email_verification_token")
    op.drop_column("students", "email_verified_at")
    op.drop_column("students", "email_verified")
    op.drop_column("students", "password_changed")
    op.add_column(
        "student_item_progress",
        sa.Column(
            "response_data",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "student_item_progress",
        sa.Column("transcription", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "student_item_progress",
        sa.Column(
            "prosody_score",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "student_item_progress",
        sa.Column(
            "completeness_score",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "student_item_progress", type_="foreignkey")
    op.drop_constraint(None, "student_item_progress", type_="foreignkey")
    op.create_foreign_key(
        "student_item_progress_student_assignment_id_fkey",
        "student_item_progress",
        "student_assignments",
        ["student_assignment_id"],
        ["id"],
    )
    op.create_foreign_key(
        "student_item_progress_content_item_id_fkey",
        "student_item_progress",
        "content_items",
        ["content_item_id"],
        ["id"],
    )
    op.drop_constraint(
        "_student_item_progress_uc", "student_item_progress", type_="unique"
    )
    op.create_unique_constraint(
        "unique_student_item_progress",
        "student_item_progress",
        ["student_assignment_id", "content_item_id"],
    )
    op.alter_column(
        "student_item_progress",
        "status",
        existing_type=sa.String(length=20),
        type_=postgresql.ENUM("DRAFT", "PUBLISHED", "CLOSED", name="assignmentstatus"),
        existing_nullable=True,
    )
    op.drop_column("student_item_progress", "attempts")
    op.drop_column("student_item_progress", "answer_text")
    op.add_column(
        "student_content_progress",
        sa.Column(
            "time_spent_seconds", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "student_content_progress",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "student_content_progress",
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.alter_column(
        "student_content_progress",
        "ai_scores",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "student_content_progress",
        "response_data",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.drop_column("student_content_progress", "ai_feedback")
    op.drop_column("student_assignments", "updated_at")
    op.drop_column("student_assignments", "created_at")
    op.drop_column("student_assignments", "resubmitted_at")
    op.drop_column("student_assignments", "returned_at")
    op.drop_column("student_assignments", "started_at")
    op.add_column(
        "programs",
        sa.Column("is_public", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "programs", type_="foreignkey")
    op.drop_column("programs", "deleted_at")
    op.drop_column("programs", "is_active")
    op.drop_column("programs", "tags")
    op.drop_column("programs", "order_index")
    op.drop_column("programs", "estimated_hours")
    op.drop_column("programs", "source_metadata")
    op.drop_column("programs", "source_type")
    op.drop_column("programs", "classroom_id")
    op.drop_column("programs", "is_template")
    op.drop_constraint(None, "lessons", type_="foreignkey")
    op.create_foreign_key(
        "lessons_program_id_fkey",
        "lessons",
        "programs",
        ["program_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("lessons", "is_active")
    op.drop_column("lessons", "estimated_minutes")
    op.drop_constraint("_content_item_order_uc", "content_items", type_="unique")
    op.create_index(
        "ix_content_items_content_id", "content_items", ["content_id"], unique=False
    )
    op.add_column(
        "classrooms",
        sa.Column("school", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "classrooms",
        sa.Column("grade", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.add_column(
        "classrooms",
        sa.Column(
            "academic_year", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
    )
    op.drop_column("classrooms", "level")
    op.drop_constraint(None, "classroom_students", type_="foreignkey")
    op.drop_constraint(None, "classroom_students", type_="foreignkey")
    op.create_foreign_key(
        "classroom_students_student_id_fkey",
        "classroom_students",
        "students",
        ["student_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "classroom_students_classroom_id_fkey",
        "classroom_students",
        "classrooms",
        ["classroom_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_unique_constraint(
        "unique_classroom_student", "classroom_students", ["classroom_id", "student_id"]
    )
    op.drop_column("classroom_students", "is_active")
    op.add_column(
        "assignments",
        sa.Column(
            "status",
            postgresql.ENUM("DRAFT", "PUBLISHED", "CLOSED", name="assignmentstatus"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "assignment_contents", type_="foreignkey")
    op.drop_constraint(None, "assignment_contents", type_="foreignkey")
    op.create_foreign_key(
        "assignment_contents_content_id_fkey",
        "assignment_contents",
        "contents",
        ["content_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "assignment_contents_assignment_id_fkey",
        "assignment_contents",
        "assignments",
        ["assignment_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # NOTE: Removed re-creation of unique_assignment_content constraint
    # The constraint should remain in the database throughout
    # ### end Alembic commands ###
