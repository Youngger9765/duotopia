import { useNavigate } from 'react-router-dom'
import ReadingPracticeEditor from '@/components/ReadingPracticeEditor'
import { useToast } from '@/components/ui/use-toast'

interface ReadingPracticeData {
  title: string
  level: string
  description?: string
  items: any[]
  defaultTtsAccent: 'american' | 'british' | 'indian' | 'australian'
  defaultTtsGender: 'male' | 'female'
  defaultTtsSpeed: 0.75 | 1.0 | 1.5
  defaultDefinitionLanguage: 'zh-tw' | 'zh-cn' | 'en'
}

export default function ReadingPracticeEditorPage() {
  const navigate = useNavigate()
  const { toast } = useToast()

  // Sample initial data for testing
  const sampleData: ReadingPracticeData = {
    title: "Daily Greetings",
    level: "A1", 
    description: "Basic greeting phrases for beginners",
    items: [
      {
        id: "item-1",
        text: "Good morning!",
        order: 0,
        audio: {
          source: "none"
        },
        image: {},
        definition: {
          language: "zh-tw",
          autoGenerated: false
        }
      },
      {
        id: "item-2",
        text: "How are you?", 
        order: 1,
        audio: {
          source: "none"
        },
        image: {},
        definition: {
          language: "zh-tw",
          autoGenerated: false
        }
      },
      {
        id: "item-3",
        text: "Nice to meet you!",
        order: 2,
        audio: {
          source: "none"
        },
        image: {},
        definition: {
          language: "zh-tw", 
          autoGenerated: false
        }
      }
    ],
    defaultTtsAccent: "american",
    defaultTtsGender: "female",
    defaultTtsSpeed: 1.0,
    defaultDefinitionLanguage: "zh-tw"
  }

  const handleSave = async (data: ReadingPracticeData) => {
    try {
      // TODO: Call API to save the reading practice
      console.log('Saving reading practice:', data)
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      toast({
        title: "儲存成功",
        description: `朗讀練習「${data.title}」已成功儲存`
      })
      
      // Navigate back to course management or wherever appropriate
      navigate(-1)
    } catch (error) {
      toast({
        title: "儲存失敗",
        description: "無法儲存朗讀練習，請重試",
        variant: "destructive"
      })
    }
  }

  const handleCancel = () => {
    // Navigate back without saving
    navigate(-1)
  }

  return (
    <ReadingPracticeEditor
      initialData={sampleData}
      onSave={handleSave}
      onCancel={handleCancel}
    />
  )
}