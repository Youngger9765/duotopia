import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Mic, 
  Image, 
  Globe, 
  GripVertical, 
  Copy, 
  Trash2, 
  Plus,
  Play,
  BookOpen,
  X
} from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { useToast } from '@/components/ui/use-toast'
import TTSModal from './TTSModal'
import ImageModal from './ImageModal'

interface ReadingItem {
  id: string
  text: string
  order: number
  audio?: {
    source: 'tts' | 'teacher_recorded' | 'none'
    audioUrl?: string
    ttsSettings?: {
      text: string
      accent: 'american' | 'british' | 'indian' | 'australian'
      gender: 'male' | 'female'
      speed: 0.75 | 1.0 | 1.5
    }
  }
  image?: {
    imageUrl?: string
    thumbnailUrl?: string
    altText?: string
    source?: 'upload' | 'google_search' | 'paste'
  }
  definition?: {
    text?: string
    language: 'zh-tw' | 'zh-cn' | 'en'
    autoGenerated: boolean
  }
}

interface ReadingPracticeData {
  title: string
  level: string
  description?: string
  items: ReadingItem[]
  defaultTtsAccent: 'american' | 'british' | 'indian' | 'australian'
  defaultTtsGender: 'male' | 'female'
  defaultTtsSpeed: 0.75 | 1.0 | 1.5
  defaultDefinitionLanguage: 'zh-tw' | 'zh-cn' | 'en'
}

const DIFFICULTY_LEVELS = [
  { value: 'preA', label: 'Pre-A' },
  { value: 'A1', label: 'A1' },
  { value: 'A2', label: 'A2' },
  { value: 'B1', label: 'B1' },
  { value: 'B2', label: 'B2' },
  { value: 'C1', label: 'C1' },
  { value: 'C2', label: 'C2' },
]


interface ReadingPracticeEditorProps {
  initialData?: ReadingPracticeData
  onSave: (data: ReadingPracticeData) => void
  onCancel: () => void
}

export default function ReadingPracticeEditor({ 
  initialData, 
  onSave, 
  onCancel 
}: ReadingPracticeEditorProps) {
  const { toast } = useToast()
  const [data, setData] = useState<ReadingPracticeData>(() => {
    if (initialData) return initialData
    
    // Default structure with 3 empty items
    return {
      title: '',
      level: 'A1',
      description: '',
      items: Array.from({ length: 3 }, (_, i) => ({
        id: `item-${i + 1}`,
        text: '',
        order: i,
        audio: { source: 'none' as const },
        image: {},
        definition: { 
          language: 'zh-tw' as const, 
          autoGenerated: false 
        }
      })),
      defaultTtsAccent: 'american' as const,
      defaultTtsGender: 'male' as const,
      defaultTtsSpeed: 1.0 as const,
      defaultDefinitionLanguage: 'zh-tw' as const
    }
  })

  const [showTtsModal, setShowTtsModal] = useState(false)
  const [ttsModalItemId, setTtsModalItemId] = useState<string | null>(null)
  const [showImageModal, setShowImageModal] = useState(false)
  const [imageModalItemId, setImageModalItemId] = useState<string | null>(null)
  const [draggedItem, setDraggedItem] = useState<string | null>(null)

  const updateItem = (itemId: string, updates: Partial<ReadingItem>) => {
    setData(prev => ({
      ...prev,
      items: prev.items.map(item => 
        item.id === itemId ? { ...item, ...updates } : item
      )
    }))
  }

  const addItem = () => {
    if (data.items.length >= 15) {
      toast({
        title: "已達上限",
        description: "最多只能新增15個項目",
        variant: "destructive"
      })
      return
    }

    const newItem: ReadingItem = {
      id: `item-${Date.now()}`,
      text: '',
      order: data.items.length,
      audio: { source: 'none' },
      image: {},
      definition: { 
        language: data.defaultDefinitionLanguage, 
        autoGenerated: false 
      }
    }

    setData(prev => ({
      ...prev,
      items: [...prev.items, newItem]
    }))
  }

  const removeItem = (itemId: string) => {
    if (data.items.length <= 3) {
      toast({
        title: "無法刪除",
        description: "至少需要保留3個項目",
        variant: "destructive"
      })
      return
    }

    setData(prev => ({
      ...prev,
      items: prev.items.filter(item => item.id !== itemId).map((item, index) => ({
        ...item,
        order: index
      }))
    }))
  }

  const duplicateItem = (itemId: string) => {
    if (data.items.length >= 15) {
      toast({
        title: "已達上限",
        description: "最多只能新增15個項目",
        variant: "destructive"
      })
      return
    }

    const originalItem = data.items.find(item => item.id === itemId)
    if (!originalItem) return

    const newItem: ReadingItem = {
      ...originalItem,
      id: `item-${Date.now()}`,
      order: data.items.length
    }

    setData(prev => ({
      ...prev,
      items: [...prev.items, newItem]
    }))
  }

  const openTtsModal = (itemId: string) => {
    setTtsModalItemId(itemId)
    setShowTtsModal(true)
  }

  const openImageModal = (itemId: string) => {
    setImageModalItemId(itemId)
    setShowImageModal(true)
  }

  const handleTtsConfirm = (audioData: any) => {
    if (!ttsModalItemId) return
    updateItem(ttsModalItemId, { audio: audioData })
  }

  const handleImageConfirm = (imageData: any) => {
    if (!imageModalItemId) return
    updateItem(imageModalItemId, { image: imageData })
  }

  const generateDefinition = async (itemId: string) => {
    const item = data.items.find(i => i.id === itemId)
    if (!item || !item.text.trim()) {
      toast({
        title: "無法產生定義",
        description: "請先輸入文本內容",
        variant: "destructive"
      })
      return
    }

    // TODO: Call translation API
    const mockDefinition = item.text === "Good morning" 
      ? "早安！用於早晨的問候語。"
      : `${item.text} 的定義說明`

    updateItem(itemId, {
      definition: {
        text: mockDefinition,
        language: data.defaultDefinitionLanguage,
        autoGenerated: true
      }
    })

    toast({
      title: "定義已產生",
      description: "已自動產生文本定義"
    })
  }

  const batchGenerateDefinitions = async () => {
    const itemsWithText = data.items.filter(item => item.text.trim())
    if (itemsWithText.length === 0) {
      toast({
        title: "無法批次產生",
        description: "沒有找到包含文本的項目",
        variant: "destructive"
      })
      return
    }

    // TODO: Call batch translation API
    for (const item of itemsWithText) {
      const mockDefinition = item.text === "Good morning" 
        ? "早安！用於早晨的問候語。"
        : `${item.text} 的定義說明`

      updateItem(item.id, {
        definition: {
          text: mockDefinition,
          language: data.defaultDefinitionLanguage,
          autoGenerated: true
        }
      })
    }

    toast({
      title: "批次定義完成",
      description: `已為 ${itemsWithText.length} 個項目產生定義`
    })
  }

  const batchGenerateTts = async () => {
    const itemsWithText = data.items.filter(item => item.text.trim())
    if (itemsWithText.length === 0) {
      toast({
        title: "無法批次產生",
        description: "沒有找到包含文本的項目",
        variant: "destructive"
      })
      return
    }

    // TODO: Call batch TTS API
    for (const item of itemsWithText) {
      updateItem(item.id, {
        audio: {
          source: 'tts',
          audioUrl: `https://storage.googleapis.com/audio/${item.id}.mp3`,
          ttsSettings: {
            text: item.text,
            accent: data.defaultTtsAccent,
            gender: data.defaultTtsGender,
            speed: data.defaultTtsSpeed
          }
        }
      })
    }

    toast({
      title: "批次TTS完成",
      description: `已為 ${itemsWithText.length} 個項目產生語音`
    })
  }

  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, itemId: string) => {
    setDraggedItem(itemId)
    e.dataTransfer.effectAllowed = 'move'
  }

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.dataTransfer.dropEffect = 'move'
  }

  const handleDrop = (e: React.DragEvent<HTMLDivElement>, targetItemId: string) => {
    e.preventDefault()
    
    if (!draggedItem || draggedItem === targetItemId) return

    setData(prev => {
      const items = [...prev.items]
      const draggedIndex = items.findIndex(item => item.id === draggedItem)
      const targetIndex = items.findIndex(item => item.id === targetItemId)
      
      if (draggedIndex === -1 || targetIndex === -1) return prev

      // Remove dragged item
      const [removed] = items.splice(draggedIndex, 1)
      
      // Insert at new position
      items.splice(targetIndex, 0, removed)
      
      // Update order values
      const reorderedItems = items.map((item, index) => ({
        ...item,
        order: index
      }))

      return {
        ...prev,
        items: reorderedItems
      }
    })

    setDraggedItem(null)
  }

  const handleDragEnd = () => {
    setDraggedItem(null)
  }

  const handleSave = () => {
    if (!data.title.trim()) {
      toast({
        title: "請輸入標題",
        description: "活動標題為必填項目",
        variant: "destructive"
      })
      return
    }

    const itemsWithText = data.items.filter(item => item.text.trim())
    if (itemsWithText.length < 3) {
      toast({
        title: "項目不足",
        description: "至少需要3個包含文本的項目",
        variant: "destructive"
      })
      return
    }

    onSave(data)
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">朗讀練習編輯器</h1>
        <div className="flex gap-2">
          <Button variant="outline" onClick={onCancel}>
            取消
          </Button>
          <Button onClick={handleSave}>
            儲存活動
          </Button>
        </div>
      </div>

      {/* Basic Settings */}
      <Card>
        <CardHeader>
          <CardTitle>基本設定</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">
                標題 <span className="text-red-500">*</span>
              </label>
              <Input
                value={data.title}
                onChange={(e) => setData(prev => ({ ...prev, title: e.target.value }))}
                placeholder="輸入標題"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">
                LEVEL <span className="text-red-500">*</span>
              </label>
              <Select 
                value={data.level} 
                onValueChange={(value) => setData(prev => ({ ...prev, level: value }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {DIFFICULTY_LEVELS.map(level => (
                    <SelectItem key={level.value} value={level.value}>
                      {level.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">描述</label>
            <Textarea
              value={data.description || ''}
              onChange={(e) => setData(prev => ({ ...prev, description: e.target.value }))}
              placeholder="活動描述（選填）"
              rows={2}
            />
          </div>
        </CardContent>
      </Card>

      {/* Batch Operations */}
      <div className="flex gap-2">
        <Button 
          variant="outline" 
          onClick={batchGenerateTts}
          className="flex items-center gap-2"
        >
          <Play className="w-4 h-4" />
          批次生成TTS
        </Button>
        <Button 
          variant="outline" 
          onClick={batchGenerateDefinitions}
          className="flex items-center gap-2"
        >
          <BookOpen className="w-4 h-4" />
          批次生成定義
        </Button>
      </div>

      {/* Reading Items */}
      <div className="space-y-3">
        {data.items.map((item, index) => (
          <div 
            key={item.id} 
            className={`p-4 bg-white rounded-lg border shadow-sm transition-opacity ${draggedItem === item.id ? 'opacity-50' : ''}`}
            draggable
            onDragStart={(e) => handleDragStart(e, item.id)}
            onDragOver={handleDragOver}
            onDrop={(e) => handleDrop(e, item.id)}
            onDragEnd={handleDragEnd}
          >
            <div className="flex items-center gap-4">
              <div className="flex flex-col items-center gap-2">
                <span className="font-semibold text-lg">{index + 1}</span>
                <GripVertical className="w-4 h-4 text-gray-400 cursor-move" />
                <div className="flex flex-col gap-1">
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => duplicateItem(item.id)}
                  >
                    <Copy className="w-3 h-3" />
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => removeItem(item.id)}
                    disabled={data.items.length <= 3}
                  >
                    <Trash2 className="w-3 h-3" />
                  </Button>
                </div>
              </div>

              <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">輸入文本</label>
                  <div className="relative">
                    <Input
                      value={item.text}
                      onChange={(e) => updateItem(item.id, { text: e.target.value })}
                      placeholder="輸入單字、片語或句子"
                      className="pr-20"
                    />
                    <div className="absolute right-2 top-1/2 -translate-y-1/2 flex gap-1">
                      <Button 
                        size="sm" 
                        variant="ghost"
                        onClick={() => openTtsModal(item.id)}
                        className={`p-1 w-6 h-6 ${item.audio?.source !== 'none' ? 'text-blue-600' : ''}`}
                      >
                        <Mic className="w-3 h-3" />
                      </Button>
                      <Button 
                        size="sm" 
                        variant="ghost"
                        onClick={() => openImageModal(item.id)}
                        className={`p-1 w-6 h-6 ${item.image?.imageUrl ? 'text-green-600' : ''}`}
                      >
                        <Image className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                </div>

                <div>
                  <div className="flex items-center justify-between mb-1">
                    <label className="block text-sm font-medium">輸入定義</label>
                    <Button 
                      size="sm" 
                      variant="ghost"
                      onClick={() => generateDefinition(item.id)}
                      className="p-1 w-6 h-6"
                    >
                      <Globe className="w-3 h-3" />
                    </Button>
                  </div>
                  <Textarea
                    value={item.definition?.text || ''}
                    onChange={(e) => updateItem(item.id, {
                      definition: {
                        ...item.definition,
                        text: e.target.value,
                        language: item.definition?.language || data.defaultDefinitionLanguage,
                        autoGenerated: false
                      }
                    })}
                    placeholder="輸入定義或翻譯"
                    rows={2}
                  />
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Add Item Button */}
      <div className="flex justify-center">
        <Button 
          onClick={addItem}
          disabled={data.items.length >= 15}
          className="bg-purple-600 hover:bg-purple-700 rounded-full w-12 h-12 p-0"
        >
          <Plus className="w-6 h-6" />
        </Button>
      </div>

      {/* Labels Input */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-sm font-medium">標籤：</span>
            <span className="bg-gray-200 px-2 py-1 rounded-full text-xs flex items-center gap-1">
              public
              <X className="w-3 h-3 cursor-pointer" />
            </span>
          </div>
          <Input
            placeholder="搜尋標籤或按 Enter 新增"
            className="mt-2"
          />
        </CardContent>
      </Card>

      {/* TTS Modal */}
      {showTtsModal && ttsModalItemId && (
        <TTSModal
          isOpen={showTtsModal}
          onClose={() => {
            setShowTtsModal(false)
            setTtsModalItemId(null)
          }}
          initialText={data.items.find(item => item.id === ttsModalItemId)?.text || ''}
          currentAudio={data.items.find(item => item.id === ttsModalItemId)?.audio}
          onConfirm={handleTtsConfirm}
          defaultSettings={{
            accent: data.defaultTtsAccent,
            gender: data.defaultTtsGender,
            speed: data.defaultTtsSpeed
          }}
        />
      )}

      {/* Image Modal */}
      {showImageModal && imageModalItemId && (
        <ImageModal
          isOpen={showImageModal}
          onClose={() => {
            setShowImageModal(false)
            setImageModalItemId(null)
          }}
          currentImage={data.items.find(item => item.id === imageModalItemId)?.image}
          onConfirm={handleImageConfirm}
        />
      )}
    </div>
  )
}