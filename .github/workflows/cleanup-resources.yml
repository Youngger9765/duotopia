name: 🧹 Cleanup Cloud Resources

on:
  # 每天凌晨 2 點執行（台灣時間）
  schedule:
    - cron: '0 18 * * *'  # UTC 18:00 = 台灣時間 02:00

  # 允許手動觸發
  workflow_dispatch:
    inputs:
      keep_revisions:
        description: '保留最近幾個 revisions'
        required: false
        default: '1'  # 單人開發，只保留 1 個就夠了
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '5'
      keep_images:
        description: '保留最近幾個 images'
        required: false
        default: '2'  # 只保留 2 個 image 備用
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '5'

env:
  PROJECT_ID: duotopia-472708
  REGION: asia-east1
  REPOSITORY: duotopia-repo

jobs:
  cleanup-cloud-run:
    name: 🗑️ Clean Cloud Run Revisions
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🧹 Clean All Service Revisions
        run: |
          # 設定保留數量
          KEEP_COUNT=${{ github.event.inputs.keep_revisions || '3' }}
          echo "📌 Will keep $KEEP_COUNT most recent revisions per service"
          echo ""

          # 所有服務列表
          services=(
            "duotopia-production-backend"
            "duotopia-production-frontend"
            "duotopia-staging-backend"
            "duotopia-staging-frontend"
          )

          total_deleted=0

          for service in "${services[@]}"; do
            echo "📦 Checking service: $service"

            # 獲取所有非活躍的 revisions
            REVISIONS=$(gcloud run revisions list \
              --service="$service" \
              --region=${{ env.REGION }} \
              --format="value(REVISION,ACTIVE)" \
              --sort-by="~metadata.creationTimestamp" \
              2>/dev/null | grep -v "True" | awk '{print $1}' || true)

            if [ -z "$REVISIONS" ]; then
              echo "   ✓ No inactive revisions"
              echo ""
              continue
            fi

            TOTAL=$(echo "$REVISIONS" | wc -l | tr -d ' ')
            echo "   📊 Inactive revisions: $TOTAL"

            if [ $TOTAL -gt $KEEP_COUNT ]; then
              TO_DELETE=$(echo "$REVISIONS" | tail -n +$((KEEP_COUNT + 1)) || true)
              DELETE_COUNT=$(echo "$TO_DELETE" | wc -l | tr -d ' ')

              echo "   🗑️ Deleting $DELETE_COUNT old revisions..."

              for REVISION in $TO_DELETE; do
                if [ -n "$REVISION" ]; then
                  echo "      Deleting: $REVISION"
                  gcloud run revisions delete "$REVISION" \
                    --region=${{ env.REGION }} \
                    --quiet || echo "      ⚠️ Failed to delete $REVISION"
                  ((total_deleted++)) || true
                fi
              done
            else
              echo "   ✓ Within retention limit ($TOTAL revisions)"
            fi

            echo ""
          done

          echo "✅ Cleanup complete! Deleted $total_deleted revisions across all services"

  cleanup-container-images:
    name: 🐳 Clean Container Images
    runs-on: ubuntu-latest
    needs: cleanup-cloud-run

    permissions:
      contents: read
      id-token: write

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Clean Backend Images
        run: |
          echo "🔍 Checking backend container images..."

          KEEP_COUNT=${{ github.event.inputs.keep_images || '2' }}
          echo "📌 Will keep $KEEP_COUNT most recent images"

          # 列出所有 backend images (使用正確的指令)
          IMAGES=$(gcloud artifacts docker tags list \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend \
            --format="value(digest)" \
            --sort-by="~timestamp" 2>/dev/null || echo "")

          if [ -z "$IMAGES" ]; then
            echo "⚠️ No images found or repository doesn't exist"
            exit 0
          fi

          TOTAL=$(echo "$IMAGES" | wc -l)
          echo "📊 Total images: $TOTAL"

          if [ $TOTAL -gt $KEEP_COUNT ]; then
            TO_DELETE=$(echo "$IMAGES" | tail -n +$((KEEP_COUNT + 1)))
            DELETE_COUNT=$(echo "$TO_DELETE" | wc -l)

            echo "🗑️ Deleting $DELETE_COUNT old images..."

            for DIGEST in $TO_DELETE; do
              echo "  Deleting: $DIGEST"
              IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend@sha256:$DIGEST"

              # 直接刪除映像（會自動刪除相關的 tags）
              if gcloud artifacts docker images delete "${IMAGE_URI}" --delete-tags --quiet 2>&1; then
                echo "    ✅ Successfully deleted image: $DIGEST"
              else
                echo "    ⚠️ Failed to delete image: $DIGEST"
              fi
            done

            echo "✅ Backend images cleanup complete!"
          else
            echo "✅ No cleanup needed. Only $TOTAL images exist."
          fi

      - name: 🐳 Clean Frontend Images
        run: |
          echo "🔍 Checking frontend container images..."

          KEEP_COUNT=${{ github.event.inputs.keep_images || '2' }}
          echo "📌 Will keep $KEEP_COUNT most recent images"

          # 列出所有 frontend images (使用正確的指令)
          IMAGES=$(gcloud artifacts docker tags list \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend \
            --format="value(digest)" \
            --sort-by="~timestamp" 2>/dev/null || echo "")

          if [ -z "$IMAGES" ]; then
            echo "⚠️ No images found or repository doesn't exist"
            exit 0
          fi

          TOTAL=$(echo "$IMAGES" | wc -l)
          echo "📊 Total images: $TOTAL"

          if [ $TOTAL -gt $KEEP_COUNT ]; then
            TO_DELETE=$(echo "$IMAGES" | tail -n +$((KEEP_COUNT + 1)))
            DELETE_COUNT=$(echo "$TO_DELETE" | wc -l)

            echo "🗑️ Deleting $DELETE_COUNT old images..."

            for DIGEST in $TO_DELETE; do
              echo "  Deleting: $DIGEST"
              IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend@sha256:$DIGEST"

              # 直接刪除映像（會自動刪除相關的 tags）
              if gcloud artifacts docker images delete "${IMAGE_URI}" --delete-tags --quiet 2>&1; then
                echo "    ✅ Successfully deleted image: $DIGEST"
              else
                echo "    ⚠️ Failed to delete image: $DIGEST"
              fi
            done

            echo "✅ Frontend images cleanup complete!"
          else
            echo "✅ No cleanup needed. Only $TOTAL images exist."
          fi

  summary:
    name: 📊 Cleanup Summary
    runs-on: ubuntu-latest
    needs: [cleanup-cloud-run, cleanup-container-images]
    if: always()

    steps:
      - name: 📝 Generate Summary
        run: |
          echo "## 🧹 Cloud Resources Cleanup Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 Execution Time" >> $GITHUB_STEP_SUMMARY
          echo "- Date: $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered by: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Keep Revisions: ${{ github.event.inputs.keep_revisions || '3' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Keep Images: ${{ github.event.inputs.keep_images || '5' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💰 Cost Savings" >> $GITHUB_STEP_SUMMARY
          echo "- Cloud Run: Reduced idle instances" >> $GITHUB_STEP_SUMMARY
          echo "- Storage: Freed up container registry space" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Cleanup completed successfully!" >> $GITHUB_STEP_SUMMARY
