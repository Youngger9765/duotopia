name: Setup Cloud Scheduler

# ⚠️ 只在需要時手動觸發，不會自動執行
# 使用時機：
# 1. 第一次部署 Cloud Scheduler
# 2. Cron 規則變更（時間、URL）
# 3. 環境變數更新
on:
  workflow_dispatch:  # 只允許手動觸發
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: duotopia-472708
  REGION: asia-east1

jobs:
  setup-scheduler:
    name: 📅 Setup Cloud Scheduler
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Set Environment Variables
      id: env_vars
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "BACKEND_URL=${{ secrets.PRODUCTION_BACKEND_URL }}" >> $GITHUB_OUTPUT
          echo "CRON_SECRET=${{ secrets.PRODUCTION_CRON_SECRET }}" >> $GITHUB_OUTPUT
          echo "ENV_SUFFIX=production" >> $GITHUB_OUTPUT
        else
          echo "BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> $GITHUB_OUTPUT
          echo "CRON_SECRET=${{ secrets.STAGING_CRON_SECRET }}" >> $GITHUB_OUTPUT
          echo "ENV_SUFFIX=staging" >> $GITHUB_OUTPUT
        fi

    - name: Check existing Cloud Scheduler jobs
      run: |
        echo "📋 現有的 Cloud Scheduler jobs："
        gcloud scheduler jobs list --location=${{ env.REGION }} || echo "沒有現有的 jobs"

    - name: Setup Monthly Renewal Job (Production Only)
      if: github.event.inputs.environment == 'production'
      run: |
        JOB_NAME="monthly-renewal-production"

        echo "🗑️  刪除舊的 job（如果存在）..."
        gcloud scheduler jobs delete $JOB_NAME \
          --location=${{ env.REGION }} \
          --quiet || echo "No existing job to delete"

        echo "✨ 創建新的 monthly renewal job..."
        gcloud scheduler jobs create http $JOB_NAME \
          --location=${{ env.REGION }} \
          --schedule="0 2 1 * *" \
          --time-zone="Asia/Taipei" \
          --uri="${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/monthly-renewal" \
          --http-method=POST \
          --headers="X-Cron-Secret=${{ steps.env_vars.outputs.CRON_SECRET }},Content-Type=application/json" \
          --attempt-deadline=300s \
          --max-retry-attempts=3 \
          --description="每月 1 號凌晨 2:00 (台北時間) 執行自動續訂 - production only"

        echo "✅ Monthly renewal job 創建成功（⚠️ 會真實扣款）"

    - name: Setup Renewal Reminder Job (Production Only)
      if: github.event.inputs.environment == 'production'
      run: |
        JOB_NAME="renewal-reminder-production"

        echo "🗑️  刪除舊的 job（如果存在）..."
        gcloud scheduler jobs delete $JOB_NAME \
          --location=${{ env.REGION }} \
          --quiet || echo "No existing job to delete"

        echo "✨ 創建新的 renewal reminder job..."
        gcloud scheduler jobs create http $JOB_NAME \
          --location=${{ env.REGION }} \
          --schedule="0 3 * * *" \
          --time-zone="Asia/Taipei" \
          --uri="${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/renewal-reminder" \
          --http-method=POST \
          --headers="X-Cron-Secret=${{ steps.env_vars.outputs.CRON_SECRET }},Content-Type=application/json" \
          --attempt-deadline=300s \
          --max-retry-attempts=3 \
          --description="每天凌晨 3:00 (台北時間) 發送到期提醒 - production only"

        echo "✅ Renewal reminder job 創建成功（⚠️ 會發送真實提醒給用戶）"

    - name: Setup Recording Error Report Job (Production Only)
      if: github.event.inputs.environment == 'production'
      run: |
        JOB_NAME="recording-error-report-production"

        echo "🗑️  刪除舊的 recording error report job（如果存在）..."
        gcloud scheduler jobs delete $JOB_NAME \
          --location=${{ env.REGION }} \
          --quiet || echo "No existing job to delete"

        echo "✨ 創建錄音錯誤報告 job..."
        gcloud scheduler jobs create http $JOB_NAME \
          --location=${{ env.REGION }} \
          --schedule="0 * * * *" \
          --time-zone="Asia/Taipei" \
          --uri="${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/recording-error-report" \
          --http-method=POST \
          --headers="X-Cron-Secret=${{ steps.env_vars.outputs.CRON_SECRET }},Content-Type=application/json" \
          --attempt-deadline=300s \
          --max-retry-attempts=2 \
          --description="每小時檢查 BigQuery 錄音錯誤並發送報告到 myduotopia@gmail.com - production only"

        echo "✅ Recording error report job 創建成功"
        echo ""
        echo "📊 此 job 每小時執行一次，統計過去 24H 和 1H 的錄音錯誤"
        echo "📧 報告會發送到 myduotopia@gmail.com"
        echo "🤖 包含 OpenAI AI 分析摘要"

    - name: Setup Test Notification Job (Staging Only)
      if: github.event.inputs.environment == 'staging'
      run: |
        JOB_NAME="test-notification-staging"

        echo "🗑️  刪除舊的 test notification job（如果存在）..."
        gcloud scheduler jobs delete $JOB_NAME \
          --location=${{ env.REGION }} \
          --quiet || echo "No existing job to delete"

        echo "✨ 創建測試通知 job..."
        gcloud scheduler jobs create http $JOB_NAME \
          --location=${{ env.REGION }} \
          --schedule="0 9 * * *" \
          --time-zone="Asia/Taipei" \
          --uri="${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/test-notification" \
          --http-method=POST \
          --headers="X-Cron-Secret=${{ steps.env_vars.outputs.CRON_SECRET }},Content-Type=application/json" \
          --attempt-deadline=300s \
          --max-retry-attempts=3 \
          --description="每天早上 9:00 (台北時間) 發送測試通知到 myduotopia@gmail.com - staging only"

        echo "✅ Test notification job 創建成功"
        echo ""
        echo "📧 此 job 每天早上 9:00 會發送測試郵件到 myduotopia@gmail.com"
        echo "💡 可以透過這個測試確認 Cloud Scheduler 是否正常運作"

    - name: List all Cloud Scheduler jobs
      run: |
        echo ""
        echo "📅 所有 Cloud Scheduler jobs："
        gcloud scheduler jobs list --location=${{ env.REGION }}

        echo ""
        echo "💰 成本估算："
        if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
          echo "- Cloud Scheduler: 1 個 job × USD 0.10/月 = USD 0.10/月"
          echo "  - Test Notification (每天 1 次 - staging only)"
          echo "- HTTP 請求成本: 免費（在 Cloud Run 免費額度內）"
        else
          echo "- Cloud Scheduler: 3 個 jobs × USD 0.10/月 = USD 0.30/月"
          echo "  - Monthly Renewal (每月 1 次 - production only)"
          echo "  - Renewal Reminder (每天 1 次 - production only)"
          echo "  - Recording Error Report (每小時 1 次 = 24×30 = 720 次/月 - production only)"
          echo "- HTTP 請求成本: 免費（在 Cloud Run 免費額度內）"
          echo "- BigQuery 查詢成本: ~USD 0.02/月（每小時查詢兩次，每次 < 10 MB）"
          echo "- OpenAI API 成本: ~USD 0.01/月（gpt-4o-mini, 每次 300 tokens）"
        fi

    - name: Test Jobs
      run: |
        echo ""
        echo "🧪 測試指令："
        echo ""
        if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
          echo "1. 測試通知 job（安全，只發送測試 email）："
          echo "   gcloud scheduler jobs run test-notification-staging --location=${{ env.REGION }}"
          echo ""
          echo "💡 Staging 只有測試通知，不會影響真實用戶"
        else
          echo "1. 測試錄音錯誤報告（安全，只發送 email）："
          echo "   gcloud scheduler jobs run recording-error-report-production --location=${{ env.REGION }}"
          echo "   💡 會查詢 BigQuery 並使用 OpenAI 生成分析"
          echo ""
          echo "2. 測試 renewal reminder（⚠️ 會發送真實提醒給用戶）："
          echo "   gcloud scheduler jobs run renewal-reminder-production --location=${{ env.REGION }}"
          echo ""
          echo "3. 測試 monthly renewal（🚨 會真實執行扣款邏輯！）："
          echo "   gcloud scheduler jobs run monthly-renewal-production --location=${{ env.REGION }}"
        fi

    - name: Summary
      run: |
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ Cloud Scheduler 設定完成"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "環境: ${{ github.event.inputs.environment }}"
        echo "Region: ${{ env.REGION }}"
        echo ""
        if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
          echo "📅 Job 1: test-notification-staging (僅 staging)"
          echo "   排程: 每天早上 9:00 (台北時間)"
          echo "   URL: ${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/test-notification"
          echo "   📧 發送測試郵件到 myduotopia@gmail.com"
          echo ""
          echo "💡 Staging 只有測試通知，不會影響真實用戶和扣款"
        else
          echo "📅 Job 1: monthly-renewal-production (僅 production)"
          echo "   排程: 每月 1 號凌晨 2:00 (台北時間)"
          echo "   URL: ${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/monthly-renewal"
          echo "   🚨 會真實執行扣款邏輯"
          echo ""
          echo "📅 Job 2: renewal-reminder-production (僅 production)"
          echo "   排程: 每天凌晨 3:00 (台北時間)"
          echo "   URL: ${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/renewal-reminder"
          echo "   ⚠️ 會發送真實提醒給用戶"
          echo ""
          echo "📅 Job 3: recording-error-report-production (僅 production)"
          echo "   排程: 每小時 (台北時間)"
          echo "   URL: ${{ steps.env_vars.outputs.BACKEND_URL }}/api/cron/recording-error-report"
          echo "   📊 查詢 BigQuery 錄音錯誤（24H + 1H）"
          echo "   🤖 使用 OpenAI 生成錯誤分析摘要"
          echo "   📧 發送報告到 myduotopia@gmail.com"
        fi
        echo ""
        echo "💡 下次需要更新時，請在 GitHub Actions 手動觸發此 workflow"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
