name: Security Scan

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-scanning:
    name: üîê Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better detection

      - name: Run Trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Detect Secrets
        uses: reviewdog/action-detect-secrets@master
        with:
          reporter: github-pr-review
          fail_on_error: true

  dependency-check:
    name: üîç Dependency Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Python Safety Check
        run: |
          cd backend
          pip install safety
          pip install -r requirements.txt
          safety check --json --short-report || true

      - name: Run NPM Audit
        run: |
          cd frontend
          npm audit --audit-level=high || true

  code-scanning:
    name: üõ°Ô∏è Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  credential-check:
    name: üîí Credential Exposure Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for hardcoded credentials
        run: |
          echo "Checking for hardcoded database URLs..."
          if grep -r "postgresql://[^:]+:[^@]+@" . \
            --include="*.py" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.js" \
            --include="Makefile" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude="*.example" | \
            grep -v "dummy" | \
            grep -v "localhost"; then
            echo "::error::Found exposed database credentials!"
            exit 1
          fi

          echo "Checking for hardcoded passwords..."
          if grep -r -E "(password|secret|key|token)\s*=\s*[\"'][^\"']+[\"']" . \
            --include="*.py" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.js" \
            --include="Makefile" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude="*.example" | \
            grep -v "your-" | \
            grep -v "dummy" | \
            grep -v "TODO"; then
            echo "::error::Found hardcoded credentials!"
            exit 1
          fi

          echo "‚úÖ No obvious credentials found in code"

      - name: Check git history for secrets
        run: |
          echo "Scanning recent commits for exposed secrets..."
          if git log -p -20 | grep -E "postgresql://[^:]+:[^@]+@" | \
            grep -v "dummy" | \
            grep -v "localhost"; then
            echo "::warning::Database credentials found in git history - consider rotating"
          fi

  security-report:
    name: üìä Security Report
    needs: [secret-scanning, dependency-check, code-scanning, credential-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## üîê Security Scan Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Secret Detection | ${{ needs.secret-scanning.result }} |"
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |"
          echo "| Code Analysis | ${{ needs.code-scanning.result }} |"
          echo "| Credential Check | ${{ needs.credential-check.result }} |"
          echo ""

          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "‚ùå Security issues detected. Please review and fix."
            exit 1
          else
            echo "‚úÖ All security checks passed!"
          fi
