name: Deploy to Staging

on:
  workflow_dispatch:  # ÊâãÂãïËß∏Áôº
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]
  schedule:
    # Run daily at 2 AM UTC for security scan
    - cron: '0 2 * * *'

env:
  PROJECT_ID: duotopia-469413
  REGION: asia-east1
  BACKEND_SERVICE: duotopia-staging-backend
  FRONTEND_SERVICE: duotopia-staging-frontend
  REPOSITORY: duotopia-repo

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        npm config set registry https://registry.npmmirror.com
        npm ci --prefer-offline --no-audit

    - name: Run frontend type check
      working-directory: ./frontend
      run: |
        echo "Running TypeScript type check..."
        npx tsc --noEmit || echo "TypeScript check completed with warnings"

    - name: Run frontend lint
      working-directory: ./frontend
      run: npm run lint:ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 pytest pytest-cov

    - name: Run Black formatting check
      working-directory: ./backend
      run: |
        echo "Checking Python code formatting with Black..."
        black --check . || (echo "‚ùå Black formatting check failed. Run 'black backend/' locally to fix." && exit 1)

    - name: Run Flake8 linting
      working-directory: ./backend
      run: |
        echo "Running Flake8 linting..."
        flake8 . --max-line-length=120 --ignore=E203,W503 --exclude=alembic,__pycache__,.venv

    - name: Run pytest
      working-directory: ./backend
      run: |
        echo "Running pytest..."
        pytest tests/unit/ -v --tb=short || echo "Unit tests completed with some failures"

    - name: Test backend import
      working-directory: ./backend
      run: python -c "import main; print('Backend imports successfully')"

  # Security Scanning Jobs
  secret-scanning:
    name: üîê Secret Detection
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block deployment on security issues
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better detection

      - name: Run Trufflehog
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Detect Secrets
        uses: reviewdog/action-detect-secrets@master
        continue-on-error: true
        with:
          reporter: github-pr-review
          fail_on_error: false

  dependency-check:
    name: üîç Dependency Vulnerabilities
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Python Safety Check
        continue-on-error: true
        run: |
          cd backend
          pip install safety
          pip install -r requirements.txt
          safety check --json || true

      - name: Run NPM Audit
        continue-on-error: true
        run: |
          cd frontend
          npm audit --audit-level=critical || true

  code-scanning:
    name: üõ°Ô∏è Code Security Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        continue-on-error: true
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  credential-check:
    name: üîí Credential Exposure Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for hardcoded credentials
        continue-on-error: true
        run: |
          echo "Checking for hardcoded database URLs..."
          if grep -r "postgresql://[^:]+:[^@]+@" . \
            --include="*.py" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.js" \
            --include="Makefile" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude="*.example" | \
            grep -v "dummy" | \
            grep -v "localhost"; then
            echo "::warning::Found exposed database credentials!"
          fi

          echo "Checking for hardcoded passwords..."
          if grep -r -E "(password|secret|key|token)\s*=\s*[\"'][^\"']+[\"']" . \
            --include="*.py" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.js" \
            --include="Makefile" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude="*.example" | \
            grep -v "your-" | \
            grep -v "dummy" | \
            grep -v "TODO"; then
            echo "::warning::Found hardcoded credentials!"
          fi

          echo "‚úÖ No obvious credentials found in code"

      - name: Check git history for secrets
        continue-on-error: true
        run: |
          echo "Scanning recent commits for exposed secrets..."
          if git log -p -20 | grep -E "postgresql://[^:]+:[^@]+@" | \
            grep -v "dummy" | \
            grep -v "localhost"; then
            echo "::warning::Database credentials found in git history - consider rotating"
          fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'

    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create GCS Service Account Key File
      run: |
        echo "${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}" | base64 -d > backend/service-account-key.json

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker $REGION-docker.pkg.dev

    # Ë®≠ÂÆöË≥áÊñôÂ∫´Áí∞Â¢ÉËÆäÊï∏ - Supabase
    - name: Set Database Environment Variables
      id: db_env
      run: |
        # ‰ΩøÁî® Supabase (ÂÖçË≤ª)
        echo "DATABASE_TYPE=supabase" >> $GITHUB_OUTPUT
        echo "DATABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}" >> $GITHUB_OUTPUT
        # Use Supavisor pooler URL for Alembic (IPv4 compatible)
        echo "ALEMBIC_DATABASE_URL=${{ secrets.STAGING_SUPABASE_POOLER_URL || secrets.STAGING_SUPABASE_URL }}" >> $GITHUB_OUTPUT
        echo "SUPABASE_URL=${{ secrets.STAGING_SUPABASE_PROJECT_URL }}" >> $GITHUB_OUTPUT
        echo "SUPABASE_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }}" >> $GITHUB_OUTPUT
        echo "üÜì Using Supabase (free tier)"

    - name: Build and push backend image
      run: |
        cd backend && docker build -f Dockerfile -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_SERVICE:$GITHUB_SHA .
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_SERVICE:$GITHUB_SHA

    - name: Setup Python for migrations
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Run Alembic database migrations
      env:
        DATABASE_URL: ${{ steps.db_env.outputs.ALEMBIC_DATABASE_URL }}
      run: |
        echo "üîç Installing dependencies for migrations..."
        pip install -r backend/requirements.txt

        echo "üîÑ Running Alembic database migrations..."
        cd backend
        echo "üìä Current migration status:"
        alembic current
        echo "üîÑ Upgrading to latest migration..."
        alembic upgrade head
        echo "‚úÖ Migrations completed"

    - name: Check for missing migrations
      env:
        DATABASE_URL: ${{ steps.db_env.outputs.ALEMBIC_DATABASE_URL }}
      run: |
        echo "üîç Checking for uncommitted model changes..."
        cd backend
        if ! alembic check; then
          echo "‚ùå ERROR: Database models have changed but no migration was created!"
          echo "üìù Please run the following command locally:"
          echo "   alembic revision --autogenerate -m 'describe your changes'"
          echo "   Then commit the generated migration file."
          exit 1
        fi
        echo "‚úÖ No pending model changes detected"

    - name: Deploy backend to Cloud Run
      run: |
        # Áí∞Â¢ÉËÆäÊï∏Ë®≠ÂÆö
        ENV_VARS="DATABASE_URL=${{ steps.db_env.outputs.DATABASE_URL }}"
        ENV_VARS="$ENV_VARS,DATABASE_TYPE=supabase"
        ENV_VARS="$ENV_VARS,JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}"
        ENV_VARS="$ENV_VARS,JWT_ALGORITHM=HS256"
        ENV_VARS="$ENV_VARS,JWT_EXPIRE_MINUTES=30"
        ENV_VARS="$ENV_VARS,ENVIRONMENT=staging"
        ENV_VARS="$ENV_VARS,SUPABASE_URL=${{ steps.db_env.outputs.SUPABASE_URL }}"
        ENV_VARS="$ENV_VARS,SUPABASE_KEY=${{ steps.db_env.outputs.SUPABASE_KEY }}"
        ENV_VARS="$ENV_VARS,OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}"
        ENV_VARS="$ENV_VARS,SMTP_HOST=${{ secrets.SMTP_HOST }}"
        ENV_VARS="$ENV_VARS,SMTP_PORT=${{ secrets.SMTP_PORT }}"
        ENV_VARS="$ENV_VARS,SMTP_USER=${{ secrets.SMTP_USER }}"
        ENV_VARS="$ENV_VARS,SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}"
        ENV_VARS="$ENV_VARS,FROM_EMAIL=${{ secrets.FROM_EMAIL }}"
        ENV_VARS="$ENV_VARS,FROM_NAME=${{ secrets.FROM_NAME }}"
        ENV_VARS="$ENV_VARS,FRONTEND_URL=${{ secrets.FRONTEND_URL }}"

        gcloud run deploy $BACKEND_SERVICE \
          --image $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --cpu-throttling \
          --concurrency 80 \
          --cpu-boost \
          --set-env-vars="$ENV_VARS"

    - name: Get backend URL and create .env
      working-directory: ./frontend
      run: |
        # Áç≤ÂèñÂæåÁ´ØÊúçÂãôÁöÑÂØ¶Èöõ URL
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --platform managed --region $REGION --format 'value(status.url)')
        echo "VITE_API_URL=$BACKEND_URL" > .env
        echo "Created .env with VITE_API_URL=$BACKEND_URL"

    - name: Build and push frontend image
      working-directory: ./frontend
      run: |
        # Áç≤ÂèñÂæåÁ´ØÂØ¶ÈöõÁöÑ URL
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --platform managed --region $REGION --format 'value(status.url)')
        echo "Building frontend with API URL: $BACKEND_URL"

        # ‰ΩøÁî® --build-arg ÂÇ≥ÈÅû API URL
        docker build -f Dockerfile.staging \
          --build-arg VITE_API_URL=$BACKEND_URL \
          -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_SERVICE:$GITHUB_SHA .
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_SERVICE:$GITHUB_SHA

    - name: Deploy frontend to Cloud Run
      run: |
        gcloud run deploy $FRONTEND_SERVICE \
          --image $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 80 \
          --memory 256Mi \
          --cpu 1 \
          --max-instances 5 \
          --min-instances 0 \
          --cpu-throttling \
          --concurrency 80 \
          --cpu-boost

    - name: Health check
      run: |
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --platform managed --region $REGION --format 'value(status.url)')
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE --platform managed --region $REGION --format 'value(status.url)')

        echo "Backend URL: $BACKEND_URL"
        echo "Frontend URL: $FRONTEND_URL"
        echo "Database Type: ${{ steps.db_env.outputs.DATABASE_TYPE }}"

        # Á≠âÂæÖÊúçÂãôÂïüÂãï
        sleep 30

        # Ê∏¨Ë©¶ÂæåÁ´ØÂÅ•Â∫∑Ê™¢Êü•
        for i in {1..5}; do
          if curl -f "$BACKEND_URL/health"; then
            echo "Backend health check passed"
            break
          else
            echo "Backend health check failed, attempt $i/5"
            sleep 10
          fi
        done

        # Ê∏¨Ë©¶ÂâçÁ´Ø
        for i in {1..5}; do
          if curl -f "$FRONTEND_URL"; then
            echo "Frontend health check passed"
            break
          else
            echo "Frontend health check failed, attempt $i/5"
            sleep 10
          fi
        done

        # Ê∏¨Ë©¶ÂâçÁ´Ø API ‰ª£ÁêÜ
        for i in {1..5}; do
          if curl -f "$FRONTEND_URL/api/health"; then
            echo "Frontend API proxy check passed"
            break
          else
            echo "Frontend API proxy check failed, attempt $i/5"
            sleep 10
          fi
        done

    # Ê∏ÖÁêÜËàäÁâàÊú¨Êò†ÂÉèÊ™îÔºàÁúÅÈå¢Ôºâ
    - name: Cleanup old images
      if: success()
      run: |
        echo "üßπ Ê∏ÖÁêÜ Artifact Registry ËàäÁâàÊú¨..."

        # Áç≤ÂèñÁï∂Ââç‰ΩøÁî®ÁöÑÁâàÊú¨Ê®ôÁ±§
        CURRENT_TAG=$GITHUB_SHA

        # Ê∏ÖÁêÜ staging backend ËàäÁâàÊú¨
        echo "Ê∏ÖÁêÜ $BACKEND_SERVICE ËàäÁâàÊú¨..."
        gcloud artifacts docker images list \
          $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_SERVICE \
          --format='value(IMAGE)' | \
        while read IMAGE; do
          if [[ "$IMAGE" != *"$CURRENT_TAG"* ]]; then
            echo "Âà™Èô§: ${IMAGE##*/}"
            gcloud artifacts docker images delete "$IMAGE" --quiet --delete-tags || true
          fi
        done

        # Ê∏ÖÁêÜ staging frontend ËàäÁâàÊú¨
        echo "Ê∏ÖÁêÜ $FRONTEND_SERVICE ËàäÁâàÊú¨..."
        gcloud artifacts docker images list \
          $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_SERVICE \
          --format='value(IMAGE)' | \
        while read IMAGE; do
          if [[ "$IMAGE" != *"$CURRENT_TAG"* ]]; then
            echo "Âà™Èô§: ${IMAGE##*/}"
            gcloud artifacts docker images delete "$IMAGE" --quiet --delete-tags || true
          fi
        done

        echo "‚úÖ Ê∏ÖÁêÜÂÆåÊàê"

        # È°ØÁ§∫Ê∏ÖÁêÜÂæåÁöÑÂÑ≤Â≠òÁ©∫Èñì
        REPO_SIZE=$(gcloud artifacts repositories describe $REPOSITORY \
          --location=$REGION \
          --format='value(sizeBytes)' 2>/dev/null || echo "0")
        REPO_SIZE_MB=$(echo "scale=2; $REPO_SIZE / 1048576" | bc)
        echo "üì¶ Artifact Registry ‰ΩøÁî®Á©∫Èñì: ${REPO_SIZE_MB} MB"

    # È°ØÁ§∫ÈÉ®ÁΩ≤ÊëòË¶Å
    - name: Deployment Summary
      if: success()
      run: |
        echo "========================================="
        echo "üöÄ Deployment Successful!"
        echo "========================================="
        echo "Environment: Staging"
        echo "Database: Supabase"
        echo "üÜì Daily Cost: $0 (Supabase free tier)"
        echo "========================================="

  # Security Report
  security-report:
    name: üìä Security Report
    needs: [secret-scanning, dependency-check, code-scanning, credential-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## üîê Security Scan Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Secret Detection | ${{ needs.secret-scanning.result }} |"
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |"
          echo "| Code Analysis | ${{ needs.code-scanning.result }} |"
          echo "| Credential Check | ${{ needs.credential-check.result }} |"
          echo ""

          # Security scans are set to continue-on-error
          # They provide visibility but don't block deployment
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "‚ö†Ô∏è Some security checks reported issues. Please review the logs."
          else
            echo "‚úÖ All security checks completed!"
          fi
