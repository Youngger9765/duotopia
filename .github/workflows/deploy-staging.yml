name: Deploy to Staging

on:
  push:
    branches:
      - staging
  workflow_dispatch:

env:
  PROJECT_ID: duotopia-469413
  REGION: asia-east1
  SERVICE_NAME: duotopia-backend-staging
  FRONTEND_BUCKET: duotopia-frontend-staging

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run backend tests
        working-directory: ./backend
        run: |
          pytest tests/ -v --cov=. --cov-report=xml || true
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Run frontend tests
        run: |
          npm run typecheck
          npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker asia-east1-docker.pkg.dev
      
      # 新增：本地測試 Docker 構建
      - name: Test Docker build locally
        run: |
          echo "🐳 Testing Docker build..."
          docker build -f Dockerfile.backend -t test-backend .
          echo "✅ Docker build successful!"
      
      - name: Build and push Docker image
        run: |
          docker build -f Dockerfile.backend -t asia-east1-docker.pkg.dev/$PROJECT_ID/duotopia/$SERVICE_NAME:$GITHUB_SHA .
          docker tag asia-east1-docker.pkg.dev/$PROJECT_ID/duotopia/$SERVICE_NAME:$GITHUB_SHA asia-east1-docker.pkg.dev/$PROJECT_ID/duotopia/$SERVICE_NAME:latest
          docker push asia-east1-docker.pkg.dev/$PROJECT_ID/duotopia/$SERVICE_NAME:$GITHUB_SHA
          docker push asia-east1-docker.pkg.dev/$PROJECT_ID/duotopia/$SERVICE_NAME:latest
      
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image asia-east1-docker.pkg.dev/$PROJECT_ID/duotopia/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --timeout 60 \
            --max-instances 10 \
            --set-env-vars "ENVIRONMENT=staging" \
            --update-secrets "DATABASE_URL=database-url-staging:latest" \
            --update-secrets "JWT_SECRET=jwt-secret:latest" \
            --update-secrets "GOOGLE_CLIENT_ID=google-client-id:latest,GOOGLE_CLIENT_SECRET=google-client-secret:latest" \
            --set-env-vars "GCP_PROJECT_ID=$PROJECT_ID"
      
      - name: Get backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
      
      # 新增：更詳細的健康檢查
      - name: Test deployment health
        run: |
          echo "⏳ Waiting for service to be ready..."
          sleep 15
          
          echo "🔍 Testing health endpoint..."
          for i in {1..5}; do
            if curl -f ${{ steps.backend-url.outputs.url }}/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "❌ Health check failed, attempt $i/5"
              if [ $i -eq 5 ]; then
                echo "🚨 Deployment health check failed!"
                gcloud run logs read $SERVICE_NAME --limit=50 --region=$REGION
                exit 1
              fi
              sleep 10
            fi
          done
          
          echo "🔍 Testing API endpoints..."
          curl -f ${{ steps.backend-url.outputs.url }}/api/auth/validate || echo "Auth endpoint check failed"

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Get backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend
        run: |
          cd frontend
          echo "VITE_API_URL=${{ steps.backend-url.outputs.url }}" > .env.production
          npm run build
      
      - name: Create bucket if not exists
        run: |
          gsutil ls -b gs://$FRONTEND_BUCKET || gsutil mb -l $REGION gs://$FRONTEND_BUCKET
      
      - name: Deploy to Cloud Storage
        working-directory: ./frontend
        run: |
          gsutil -m rsync -r -d dist/ gs://$FRONTEND_BUCKET/
          gsutil web set -m index.html -e 404.html gs://$FRONTEND_BUCKET
          gsutil iam ch allUsers:objectViewer gs://$FRONTEND_BUCKET
      
      - name: Output URLs and test
        run: |
          echo "✅ Deployment complete!"
          echo "Backend: ${{ steps.backend-url.outputs.url }}"
          echo "Frontend: https://storage.googleapis.com/$FRONTEND_BUCKET/index.html"